{"version":3,"sources":["cardlist/card/card.component.jsx","cardlist/cardlist.componet.jsx","search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","alt","src","concat","monster","id","key","name","email","CardList","monsters","map","card_component_Card","SearchBox","_ref","eventHandler","placeholder","type","onChange","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","searchField","_this2","fetch","then","Response","json","users","setState","_this3","_this$state","filterdMonster","filter","toLowerCase","includes","search_box_component_SearchBox","e","target","value","placeHolder","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oTAIaA,qBAAO,SAAAC,GAChB,OAEQC,EAAAC,EAAAC,cAAA,OAAKC,UAAY,kBAEbH,EAAAC,EAAAC,cAAA,OAAKE,IAAM,gBAAgBC,IAAG,wBAAAC,OAA4BP,EAAMQ,QAAQC,GAA1C,4BAE9BR,EAAAC,EAAAC,cAAA,MAAIO,IAAKV,EAAMQ,QAAQC,IAAKT,EAAMQ,QAAQG,MAC1CV,EAAAC,EAAAC,cAAA,SAAIH,EAAMQ,QAAQI,UCT3B,SAASC,EAASb,GACrB,OAEIC,EAAAC,EAAAC,cAAA,OAAKC,UAAY,aAEbJ,EAAMc,SAASC,IAAI,SAAAP,GAAO,OACxBP,EAAAC,EAAAC,cAACa,EAAD,CAAON,IAAOF,EAAQC,GAAID,QAAWA,iBCNtCS,EAAY,SAAAC,GAAiC,IAA/BC,EAA+BD,EAA/BC,aAAcC,EAAiBF,EAAjBE,YACrC,OAEAnB,EAAAC,EAAAC,cAAA,SAAOC,UAAY,SAASiB,KAAO,SAASC,SAAYH,EAAcC,YAAeA,KCiC1EG,cAjCb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAEKI,MAAQ,CACXjB,SAAU,GACVkB,YAAc,IALJR,mFAUM,IAAAS,EAAAN,KAClBO,MAAM,8CACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAK,OAAIL,EAAKM,SAAS,CAAEzB,SAAUwB,uCAGpC,IAAAE,EAAAb,KAAAc,EACyBd,KAAKI,MAA9BjB,EADA2B,EACA3B,SAAUkB,EADVS,EACUT,YACXU,EAAiB5B,EAAS6B,OAAO,SAAAnC,GAAO,OAAIA,EAAQG,KAAKiC,cAAcC,SAASb,EAAYY,iBAElG,OACE3C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAC2C,EAAD,CAAW3B,aAAgB,SAAA4B,GAAC,OAAIP,EAAKD,SAAS,CAACP,YAAae,EAAEC,OAAOC,SAC/CC,YAAc,iBACpCjD,EAAAC,EAAAC,cAACU,EAAD,CAAUC,SAAY4B,YA3BZS,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzD,EAAAC,EAAAC,cAACwD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,KAAK,SAAA8B,GACjCA,EAAaC","file":"static/js/main.959f66fc.chunk.js","sourcesContent":["import React from 'react'\r\nimport './card.styles.css'\r\n\r\n\r\nexport const Card = props => {\r\n    return (\r\n        \r\n            <div className = 'card-container'>\r\n                \r\n                <img alt = 'monster here.' src = {`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\r\n                \r\n                <h2 key={props.monster.id}>{props.monster.name}</h2>\r\n                <p>{props.monster.email}</p>\r\n            </div>\r\n\r\n    )\r\n\r\n}","import React from 'react';\r\nimport './card-list.styles.css'\r\nimport {Card} from './card/card.component'\r\nexport function CardList(props){\r\n    return (\r\n\r\n        <div className = 'card-list'>\r\n            {\r\n            props.monsters.map(monster =>\r\n              <Card  key = {monster.id} monster = {monster}></Card>)\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\nimport './search-box.styles.css'\r\n\r\nexport const SearchBox = ({eventHandler, placeholder}) => {\r\n    return(\r\n\r\n    <input className = 'search' type = 'search' onChange = {eventHandler} placeholder = {placeholder} />)\r\n}","import React, { Component } from 'react';\nimport './App.css';\nimport {CardList} from './cardlist/cardlist.componet'\nimport {SearchBox } from './search-box/search-box.component'\nclass App extends Component {\n\n  constructor() {\n    super()\n\n    this.state = {\n      monsters: [],\n      searchField : ''\n    }\n\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(Response => Response.json())\n      .then(users => this.setState({ monsters: users }))\n  }\n\n  render() {\n    const {monsters, searchField} = this.state\n    const filterdMonster = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()))\n\n    return (\n      <div className=\"App\">\n        <h1>Monster-Rolodex</h1>\n        <SearchBox eventHandler = {e => this.setState({searchField: e.target.value})}\n                              placeHolder = 'Monster here' / >\n        <CardList monsters = {filterdMonster}>\n        </CardList>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}